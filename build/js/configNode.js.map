{"version":3,"sources":["src/configNode.js"],"names":[],"mappings":";;;;;;;;AAAA,IAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;;IAEnB,UAAU;UAAV,UAAU;wBAAV,UAAU;;;cAAV,UAAU;;;;SAGD,iBAAC,IAAI,EAAE,CAAC,EAAE;;AAEvB,OAAI,IAAI,YAAA,CAAC;AACT,OAAI,IAAI,GAAG,EAAE,CAAC;AACd,OAAI,QAAQ,GAAG,CAAC,CAAC;AACjB,UAAO,IAAI,EAAE;AACZ,KAAC,IAAI,CAAC,CAAC;AACP,QAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AACf,QAAI,CAAC,IAAI,IAAI,IAAI,KAAK,EAAE,EAAE,MAAM;AAChC,QAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;AACnB,QAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;AAC9B,cAAS;;KAET,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;AACpC,UAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACvB,UAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;MACtC,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;AACpC,cAAQ,IAAI,CAAC,CAAC;;MAEd,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;AACpC,eAAQ,IAAI,CAAC,CAAC;AACd,WAAI,QAAQ,KAAK,CAAC,EAAE,MAAM;OAC1B,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,GAAC,CAAC,CAAC,EAAE;AACtB,aAAM;;OAEN,MAAM,IAAI,IAAI,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;;AAEzC,YAAI,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;;uBAC9C,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;;;;AAAtC,YAAI,CAAC,IAAI,CAAC;AAAE,SAAC;QACd;IACD;AACD,UAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;GACjB;;;SAEW,eAAC,IAAI,EAAE,EAAE,EAAE;;;AACtB,KAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,UAAC,GAAG,EAAE,IAAI,EAAK;AACxC,QAAI,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;;AAEjB,QAAI,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC3C,MAAE,CAAC,GAAG,EAAE,MAAK,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACnC,CAAC,CAAC;GACH;;;QA5CI,UAAU","file":"src/configNode.js","sourcesContent":["const fs = require('fs');\n\nclass ConfigNode {\n\n\t//Takes a node and turns it into a js object, recursively adding child nodes\n\tstatic addNode(data, i) {\n\n\t\tlet line;\n\t\tlet node = {};\n\t\tlet brackets = 0;\n\t\twhile (true) {\n\t\t\ti += 1;\n\t\t\tline = data[i];\n\t\t\tif (!line && line !== '') break;\n\t\t\tline = line.trim();\n\t\t\tif (line.indexOf('//') !== -1) {\n\t\t\t\tcontinue;\n\t\t\t//Properties are key = value\n\t\t\t} else if (line.indexOf('=') !== -1) {\n\t\t\t\tline = line.split('=');\n\t\t\t\tnode[line[0].trim()] = line[1].trim();\t\n\t\t\t} else if (line.indexOf('{') !== -1) {\n\t\t\t\tbrackets += 1;\n\t\t\t//Could probably just check for this and not count brackets?\n\t\t\t} else if (line.indexOf('}') !== -1) {\n\t\t\t\tbrackets -= 1;\n\t\t\t\tif (brackets === 0) break;\n\t\t\t} else if (!data[i+1]) {\n\t\t\t\tbreak;\n\t\t\t//Handle child nodes, next line is always an open bracket\n\t\t\t} else if (data[i+1].indexOf('{') !== -1) {\n\t\t\t\t//.cfgs & .crafts don't require unique nodes\n\t\t\t\tif (node[line]) line += Math.random().toString(36).substring(7);\n\t\t\t\t[node[line], i] = this.addNode(data, i);\n\t\t\t}\n\t\t}\n\t\treturn [node, i];\t\t\n\t}\n\n\tstatic parse(path, cb) {\n\t\tfs.readFile(path, 'utf8', (err, data) => {\n\t\t\tif (err) cb(err);\n\t\t\t//Remove CR for windows, split by newline\n\t\t\tdata = data.replace(/\\r/g, '').split('\\n');\n\t\t\tcb(err, this.addNode(data, -1)[0]);\n\t\t});\n\t}\n} "]}