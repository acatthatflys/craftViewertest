{"version":3,"sources":["src/craft.js"],"names":[],"mappings":"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","file":"src/craft.js","sourcesContent":["// function parseCraft(craft, cb){\n// \tlet PythonShell = require('python-shell');\n// \tlet options = {\n// \t\t\tscriptPath: 'E:\\\\projects\\\\CraftViewer\\\\',\n// \t\t\targs:[craft]\n// \t\t};\n// \tPythonShell.run('craftToJSON.py', options, function(err, results){\n// \t\tif (err) {\n// \t\t\tconsole.log(err);\n// \t\t\tcb(err);\n// \t\t} else {\n// \t\tconsole.log(results);\n// \t\t cb(null, JSON.parse(results.join('\\n')));\n// \t\t}\n// \t});\n// }\n\nconst PythonShell = require('python-shell');\nconst _ = require('underscore');\nconst EOL = require('os').EOL;\nclass Craft {\n\n\t\n\tconstructor() {\n\t\t// this.craft;\n\n\t}\n\n\n\t// //Takes in a .craft file and populates craft with with part/val entries\n\t// //Need to rewrite .craft parser in js\n\tparse(craftPath, cb){\n\t\tlet options = {\n\t\t\t\tscriptPath: process.cwd(),\n\t\t\t\targs:[craftPath]\n\t\t};\n\t\tPythonShell.run('craftToJSON.py', options, (err, results) => {\n\t\t\tconsole.log(results.join('\\n'));\n\t\t\t\tconst craft = JSON.parse(results.join('\\n'));\n\t\t\t\tconsole.log(craft);\n\t\t\tif (err) {\n\t\t\t\tcb(err);\n\t\t\t} else {\n\t\t\t\t// const craft = JSON.parse(results.join('\\n'));\n\t\t\t\tthis.info = craft.VESSEL;\n\t\t\t\tthis.parts = _.omit(craft, 'VESSEL');\n\t\t\t\tcb(false);\n\t\t\t}\n\t\t});\n\t}\n\n\tloadParts(){\n\n\t\t//Create Part objects\n\t\tfor(let part in this.parts){\n\t\t\tconst name = this.parts[part].part.split('_').shift();\n\t\t\tconsole.log(name);\n\t\t\tif (_.contains(['strutConnector, fuelLine, launchClamp1'], name)) {\n\t\t\t\tthis.parts[part] = new Part(this.parts[part], name);\n\t\t\t\t// this.parts[part] = new CompoundPart(this.parts[part], name);\n\t\t\t} else {\n\t\t\t\tthis.parts[part] = new Part(this.parts[part], name);\n\t\t\t}\n\t\t}\n\t\tthis.mesh = new THREE.Object3D();\n\t\tthis.mesh.position.set( this.parts.PART1.pos[0], this.parts.PART1.pos[1], this.parts.PART1.pos[2] );\n\t\tscene.add(this.mesh);\n\t\t//Load mesh for each part\n\t\tfor(let part in this.parts){\n\t\t\tthis.parts[part].load(this.mesh, (err) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tconsole.log('Error loading part');\n\t\t\t\t\tconsole.log(err);\n\t\t\t\t}\n\t\t\t\tif (part === 'PART1') {\n\t\t\t\t\tthis.mesh.position.set(0,0,0);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t}\n\n}\n\n"]}