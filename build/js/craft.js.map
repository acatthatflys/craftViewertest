{"version":3,"sources":["src/craft.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAiBA,IAAM,WAAW,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAC5C,IAAM,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AAChC,IAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;;IACzB,KAAK;AAGC,UAHN,KAAK,GAGI;wBAHT,KAAK;EAMT;;;;AAAA;cANI,KAAK;;SAUL,eAAC,SAAS,EAAE,EAAE,EAAC;;;AACnB,aAAU,CAAC,KAAK,CAAC,SAAS,EAAE,UAAC,GAAG,EAAE,IAAI,EAAK;AAC1C,QAAI,GAAG,EAAE,EAAE,CAAE,GAAG,CAAC,CAAC;AAClB,UAAK,KAAK,GAAG,IAAI,CAAC;AAClB,MAAE,EAAE,CAAC;IACL,CAAC,CAAC;;;;;;;;;;;;;;;;GAgBH;;;SAEK,kBAAG;;;;;;;;;;;;;;;;;;;;AAoBR,OAAM,GAAG,GAAG,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACtD,QAAK,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC;GAC9B;;;SAEQ,qBAAE;;;;AAGV,QAAI,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,EAAC;AAC1B,QAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,SAAS;AAC1C,QAAM,KAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;AAC1E,WAAO,CAAC,GAAG,CAAC,KAAI,CAAC,CAAC;AAClB,QAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,wCAAwC,CAAC,EAAE,KAAI,CAAC,EAAE;AACjE,SAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,KAAI,CAAC,CAAC;;KAEpD,MAAM;AACN,UAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,KAAI,CAAC,CAAC;MACpD;IACD;AACD,OAAI,CAAC,IAAI,GAAG,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC;AACjC,QAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;AAErB,QAAK,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,UAAC,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAK;AACnD,QAAI,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,CAAC;AACjD,QAAI,CAAC,IAAI,CAAC,OAAK,IAAI,EAAE,UAAC,GAAG,EAAK;AAC7B,SAAI,GAAG,EAAE;AACR,aAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;AAClC,aAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AACtB,aAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;MACjB;AACD,OAAE,CAAC,GAAG,CAAC,CAAA;KACP,CAAC,CAAC;IACH,EAAE,UAAC,GAAG,EAAK;AACX,QAAI,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;AACzB,WAAK,MAAM,EAAE,CAAC;IACd,CAAC,CAAC;GACH;;;QAxFI,KAAK","file":"src/craft.js","sourcesContent":["// function parseCraft(craft, cb){\n// \tlet PythonShell = require('python-shell');\n// \tlet options = {\n// \t\t\tscriptPath: 'E:\\\\projects\\\\CraftViewer\\\\',\n// \t\t\targs:[craft]\n// \t\t};\n// \tPythonShell.run('craftToJSON.py', options, function(err, results){\n// \t\tif (err) {\n// \t\t\tconsole.log(err);\n// \t\t\tcb(err);\n// \t\t} else {\n// \t\tconsole.log(results);\n// \t\t cb(null, JSON.parse(results.join('\\n')));\n// \t\t}\n// \t});\n// }\n\nconst PythonShell = require('python-shell');\nconst _ = require('underscore');\nconst async = require('async');\nclass Craft {\n\n\t\n\tconstructor() {\n\t\t// this.craft;\n\n\t}\n\n\n\t// //Takes in a .craft file and populates craft with with part/val entries\n\tparse(craftPath, cb){\n\t\tConfigNode.parse(craftPath, (err, node) => {\n\t\t\tif (err) cb (err);\n\t\t\tthis.parts = node;\n\t\t\tcb();\n\t\t});\n\t\t// let options = {\n\t\t// \t\tscriptPath: process.cwd(),\n\t\t// \t\targs:[craftPath]\n\t\t// };\n\t\t// PythonShell.run('craftToJSON.py', options, (err, results) => {\n\t\t\t// console.log(results.join('\\n'));\n\t\t\t\t// const craft = JSON.parse(results.join('\\n'));\n\t\t\t\t// console.log(craft);\n\t\t\t// if (err) {\n\t\t\t// \tcb(err);\n\t\t\t// } else {\n\t\t\t// \t// const craft = JSON.parse(results.join('\\n'));\n\t\t\t// \t// this.info = craft.VESSEL;\n\t\t\t// \tcb(false);\n\t\t\t// }\n\t}\n\n\tcenter() {\n\t\t// let box;\n\t\t// this.mesh.traverse(function(obj){\n\t\t// \tvar geometry = obj.geometry;\n\t\t// \tif (!geometry) return;\n\t\t// \tgeometry.computeBoundingBox();\n\t\t// \tconst objBox = geometry.boundingBox.clone();\n\t\t// \tobjBox.applyMatrix4(obj.matrixWorld);\n\t\t// \tif (box) {\n\t\t// \t\tconsole.log(objBox.center());\n\t\t// \t\tbox = box.union(objBox);\n\t\t// \t\tconsole.log(box.center());\n\t\t// \t} else {\n\t\t// \t\tconsole.log('nobox');\n\t\t// \t\tbox = objBox;\n\t\t// \t}\n\t\t// });\n\t\t// console.log(box.center());\n\t\t// console.log(box.center());\n\t\t// this.mesh.position.sub(box.center());\n\t\tconst box = new THREE.Box3().setFromObject(this.mesh);\n\t\tscene.setTarget(box.center());\n\t}\n\n\tloadParts(){\n\n\t\t//Create Part objects\n\t\tfor(let part in this.parts){\n\t\t\tif (part.indexOf('PART') === -1) continue;\n\t\t\tconst name = this.parts[part].part.split('_').shift().replace(/\\./g, '_');\n\t\t\tconsole.log(name);\n\t\t\tif (_.contains(['strutConnector, fuelLine, launchClamp1'], name)) {\n\t\t\t\tthis.parts[part] = new Part(this.parts[part], name);\n\t\t\t\t// this.parts[part] = new CompoundPart(this.parts[part], name);\n\t\t\t} else {\n\t\t\t\tthis.parts[part] = new Part(this.parts[part], name);\n\t\t\t}\n\t\t}\n\t\tthis.mesh = new THREE.Object3D();\n\t\tscene.add(this.mesh);\n\t\t//Load mesh for each part\n\t\tasync.forEachOf(this.parts, (part, partName, cb) => {\n\t\t\tif (partName.indexOf('PART') === -1) return cb();\n\t\t\tpart.load(this.mesh, (err) => { \n\t\t\t\tif (err) {\n\t\t\t\t\tconsole.log('Error loading part');\n\t\t\t\t\tconsole.log(partName);\n\t\t\t\t\tconsole.log(part)\n\t\t\t\t}\n\t\t\t\tcb(err)\n\t\t\t}); \n\t\t}, (err) => {\n\t\t\tif (err) console.log(err)\n\t\t\tthis.center();\n\t\t});\n\t}\n\n}\n\n"]}