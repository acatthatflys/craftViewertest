{"version":3,"sources":["src/fileManager.js"],"names":[],"mappings":";;;;;;AAAA,IAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,IAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;;IAEvB,WAAW;AAEL,UAFN,WAAW,CAEJ,SAAS,EAAE;wBAFlB,WAAW;;AAGf,MAAI,CAAC,SAAS,GAAG,SAAS,CAAC;EAC3B;;cAJI,WAAW;;SAMP,mBAAC,EAAE,EAAE;;;AACb,OAAI,CAAC,KAAK,GAAG,EAAE,CAAC;AAChB,OAAI,CAAC,IAAI,CAAC,SAAS,GAAG,UAAU,EAAE,UAAC,GAAG,EAAE,IAAI,EAAK;AAChD,QAAI,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;AACjB,SAAK,CAAC,IAAI,CAAC,IAAI,EAAE,UAAC,GAAG,EAAE,EAAE,EAAK;AAC7B,eAAU,CAAC,KAAK,CAAC,GAAG,EAAE,UAAC,GAAG,EAAE,IAAI,EAAK;AACpC,UAAI,GAAG,EAAE,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC;AACxB,UAAI,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,EAAE,CAAC;AAC5B,UAAM,IAAI,GAAG,EAAE,CAAC;AAChB,UAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,UAAU,CAAC,CAAC;AACzE,UAAI,CAAC,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,IAAI,MAAM,CAAC,CAAC;AAC3D,YAAK,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAA,CAAE,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAA;AACpE,QAAE,EAAE,CAAC;MACL,CAAC,CAAC;KACH,EAAE,UAAC,GAAG,EAAK;AACX,YAAO,CAAC,GAAG,CAAC,MAAK,KAAK,CAAC,CAAC;AACxB,OAAE,CAAC,GAAG,CAAC,CAAC;KACR,CAAC,CAAC;IACH,CAAC,CAAC;GACH;;;SAEO,kBAAC,IAAI,EAAE,EAAE,EAAC;AACjB,OAAI,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,CAAC,qBAAqB,GAAG,IAAI,CAAC,CAAC;AAC9E,OAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;AACvB,OAAI,OAAO,GAAG;AACZ,cAAU,EAAE,OAAO,CAAC,GAAG,EAAE;AACzB,QAAI,EAAC,CAAC,IAAI,CAAC,KAAK,CAAC;IAClB,CAAC;;AAEF,cAAW,CAAC,GAAG,CAAC,aAAa,EAAE,OAAO,EAAE,UAAC,GAAG,EAAE,OAAO,EAAK;AACzD,MAAE,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;IACtC,CAAC,CAAC;GACH;;;QAtCI,WAAW","file":"src/fileManager.js","sourcesContent":["const glob = require('glob');\r\nconst path = require('path');\r\n\r\nclass FileManager {\r\n\r\n\tconstructor(kerbalDir) {\r\n\t\tthis.kerbalDir = kerbalDir;\r\n\t}\r\n\r\n\tfindParts(cb) {\r\n\t\tthis.parts = {};\r\n\t\tglob(this.kerbalDir + '**/*.cfg', (err, cfgs) => {\r\n\t\t\tif (err) cb(err);\r\n\t\t\tasync.each(cfgs, (cfg, cb) => {\r\n\t\t\t\tConfigNode.parse(cfg, (err, node) => {\r\n\t\t\t\t\tif (err) return cb(err);\r\n\t\t\t\t\tif (!node.PART) return cb();\r\n\t\t\t\t\tconst part = {};\r\n\t\t\t\t\tpart.model = path.join(path.dirname(cfg), node.PART.model || \"model.mu\");\r\n\t\t\t\t\tpart.scale = parseFloat(node.PART.rescaleFactor || '1.25');\r\n\t\t\t\t\tthis.parts[(node.PART.name || node.name).replace(/\\./g, '_')] = part\r\n\t\t\t\t\tcb();\r\n\t\t\t\t});\r\n\t\t\t}, (err) => {\r\n\t\t\t\tconsole.log(this.parts);\r\n\t\t\t\tcb(err);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tloadPart(part, cb){\r\n\t\tif (!this.parts || !this.parts[part]) return cb('cfg not found for: ' + part);\r\n\t\tpart = this.parts[part]\r\n\t\tlet options = {\r\n\t\t\t\tscriptPath: process.cwd(),\r\n\t\t\t\targs:[part.model]\r\n\t\t};\r\n\t\t\r\n\t\tPythonShell.run('muParser.py', options, (err, results) => { \r\n\t\t\tcb(err, JSON.parse(results[0]), part); \r\n\t\t});\r\n\t}\r\n}"]}